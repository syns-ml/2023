@article{model1,
    subno={M1},
    url={https://github.com/Pressio/pressio-demoapps},
    author={Francesco Rizzi and Patrick Blonigan and Eric Parish and John Tencer and Jorio Cocola and Marcin Wrobel},
    title={pressio-demoapps},
    year={2023},
    abstract={
        <strong>Abstract:</strong> pressio-demoapps is a collection of 1D, 2D and 3D problems of varying complexity (from linear advection, to reaction-diffusion and compressible Euler). It has native support for sample meshes and exact Jacobians. The code was originally started as part of the Pressio project to create a suite of benchmark problems to test ROMs and hyper-reduction techniques, but it is being developed to be self-contained, and it can be used for variety of purposes. For example, one can just use it for doing "standard" simulations, or just use the Python meshing scripts, or leverage the sample mesh capability to study function approximations. One of the objectives is to provide a simple and reliable testbed. This work has the following features: support for both C++ and Python, cell-centered finite volume discretization with various numerical schemes and exact Jacobians, built-in support for sample mesh in 1D, 2D and 3D for varying stencil sizes, and focus on providing self-contained and well-defined problems.
    },
    abbr={virtual},
}

@article{model2,
    subno={M2},
    url={https://github.com/viniviena/ude_chromatography/tree/master/UDE_paper_chromatography},
    author={Vinicius Santana and Erbet Costa and Carine Rebello and Ana Mafalda Ribeiro and Chris Rackauckas and Idelfonso Nogueira},
    title={Hybrid Non-Linear Advection-Diffusion-Sorption Simulator},
    year={2023},
    abstract={
        <strong>Abstract:</strong> The simulator under consideration represents the transport of chemical species in porous media, where diffusion, advection, and sorption play central roles as primary transport mechanisms. Rooted in principles of mass conservation and constitutive laws, the model also integrates a parameterized universal approximator capable of learning mass transfer kinetics between phases from data. This model finds substantial applicability in a range of practical engineering scenarios, including the design of fixed bed reactors [<a href="https://doi.org/10.1002/aic.14701" target="_blank">https://doi.org/10.1002/aic.14701</a>] and chromatographic separation processes [<a href="https://doi.org/10.1016/j.compchemeng.2019.06.010" target="_blank">https://doi.org/10.1016/j.compchemeng.2019.06.010</a>], and the study of subsurface soil contamination [<a href="http://arxiv.org/abs/2104.06010" target="_blank">http://arxiv.org/abs/2104.06010</a>]. The continuous nature of transport equations results in partial differential equations (PDE), which necessitate the use of suitable numerical integration methods for solving or simulating the system. To accommodate this, the simulator was constructed to operate (both calibration and simulation) using the Julia Language, specifically harnessing the power of the SciML ecosystem's libraries: OrdinaryDiffEq.jl, DiffEqFlux.jl, and SciMLSensitivity.jl. We employ the first two libraries to numerically integrate the discretized PDEs, while we use the last library to compute sensitivity information crucial for model calibration.
        <br /><strong>Motivation for combining the model with ML:</strong> The transport of chemicals in porous media involving sorption is typically modeled assuming that solid-fluid mass transfer follows first-order kinetics, akin to Newton's law of cooling. However, there are instances where this assumption proves inaccurate, resulting in poor predictive performance of the model [<a href="https://doi.org/10.1016/j.cej.2018.07.119" target="_blank">https://doi.org/10.1016/j.cej.2018.07.119</a>]. Due to the high costs associated with designing experiments to identify the true kinetic law in such systems, only a few studies in the literature have attempted to do so. Considering these limitations, this work proposes an alternative approach: substituting the solid-fluid phase mass transfer kinetics with an artificial neural network (ANN) within the partial differential equation framework. Breakthrough data is utilized to calibrate the parameters of the ANN. Following the training of the ANN, symbolic and sparse regression techniques are employed to derive a polynomial-like function that has similar predictive capabilities as the ANN. This refined model aims to enhance the accuracy and reliability of predictions in chemical transport through porous media.
    },
    abbr={virtual},
}

@article{model3,
    subno={M3},
    url={https://www.chemgymrl.com},
    author={Chris Beeler and Sriram Ganapathi Subramanian and Kyle Sprague and Nouha Chatti and Colin Bellinger and Mitchell Shahen and Nicholas Paquin and Mark Baula and Amanuel Dawit and Zihan Yang and Xinkai Li and Mark Crowley and Isaac Tamblyn},
    title={ChemGymRL: An Interactive Framework for Reinforcement Learning for Digital Chemistry},
    year={2023},
    abstract={
        <strong>Abstract:</strong> (arXiv paper: <a href="https://arxiv.org/abs/2305.14177" target="_blank">https://arxiv.org/abs/2305.14177</a>) The ChemGymRL Open Source Library enables the use of Reinforcement Learning (RL) algorithms to train agents towards the target of operating individual chemistry benches given specific material targets. The environment can be thought of as a virtual chemistry laboratory consisting of different stations (or benches) where a variety of tasks can be completed. The laboratory consists of three basic elements: vessels, shelves, and benches. Vessels contain materials, in pure or mixed form, with each vessel tracking the hidden internal state of their contents. Whether an agent can determine this state, through measurement or reasoning, is up to the design of each bench and the user's goals. A shelf can hold any vessels not currently in use, as well as the resultants (or output vessels) of previous experiments. Benches are sub-environments which enact various physical or chemical processes on the vessels. Each bench recreates a simplified version of one task in a material design pipeline and has an observation and action space specific to the task at hand.  ChemGymRL is designed in a modular fashion so that new benches can be added or modified with minimal difficulty or changes to the source code. A bench must be able to receive a set of initial experimental supplies, possibly including vessels, and return the results of the intended experiment, also including modified vessels. The details and methods of how the benches interact with the vessels between these two points are completely up to the user, including the goal of the bench. In this initial version of ChemGymRL we have implemented some core benches, which we describe in the following sections and which will allow us to demonstrate an example workflow.
        <br /><strong>Motivation for combining the model with ML:</strong> The goal of ChemGymRL is to simulate enough complexity of real-world chemistry experiments to allow meaningful exploration of algorithms for learning policies to control bench-specific agents, while keeping it simple enough that episodes can be rapidly generated during the RL algorithm development process. The environment supports the training of RL agents by associating positive and negative rewards based on the procedure and outcomes of actions taken by the agents. The aim is for ChemGymRL to help bridge the gap between autonomous laboratories and digital chemistry. This will have impacts for producing new materials, chemicals, and drugs. It will also require many technologies including search, feedback and control, and optimization, and artificial intelligence algorithms that can deal with the unique challenges of material design. This simulation environment encapsulates some of those challenges while maintaining as much realism as possible, and extensibility to allow open-source improvement of the simulations going forward. The framework raises interesting computational and modeling challenges for the Reinforcement Learning paradigm that are not always all present in other frameworks such as costs of observation, observations of various level of detail, and hierarchical planning challenges.
    },
    abbr={PM},
}

@article{model4,
    subno={M4},
    url={https://github.com/gigantocypris/SPREAD},
    author={Vidya Ganapati and Daniel Tchon and Aaron S. Brewster and Nicholas K. Sauter},
    title={The Computational Crystallography Toolbox},
    year={2023},
    abstract={
        <strong>Abstract:</strong> The Computational Crystallography Toolbox (CCTBX) is open-source software that allows for processing of crystallographic data, including from serial femtosecond crystallography (SFX), for macromolecular structure determination. We aim to use the modules in CCTBX to determine the oxidation state of individual metal atoms in a macromolecule. Changes in oxidation state are reflected in small shifts of the atom's X-ray absorption edge. These energy shifts can be extracted from the diffraction images recorded in serial femtosecond crystallography, given knowledge of a forward physics model. However, as the diffraction changes only slightly due to the absorption edge shift, inaccuracies in the forward physics model make it extremely challenging to observe the oxidation state.  In this work, we describe the potential impact of using self-supervised deep learning to correct the scientific model in CCTBX and provide uncertainty quantification. We provide code for forward model simulation and data analysis, built from CCTBX modules, at <a href="https://github.com/gigantocypris/SPREAD" target="_blank">https://github.com/gigantocypris/SPREAD</a>, which can be integrated with machine learning. We describe open questions in algorithm development to help spur advances through dialog between crystallographers and machine learning researchers. New methods could help elucidate charge transfer processes in many reactions, including key events in photosynthesis. We further describe CCTBX and the potential for applying machine learning in a paper at <a href="https://github.com/gigantocypris/SPREAD/blob/main/PAPER.pdf" target="_blank">https://github.com/gigantocypris/SPREAD/blob/main/PAPER.pdf</a>.
    },
    abbr={PM},
}

@article{model5,
    subno={M5},
    url={https://github.com/ergodicio/adept},
    author={Archis Joglekar and Alexander Thomas},
    title={ADEPT - Automatic Differentiation Enabled Plasma Transport},
    year={2023},
    abstract={
        <strong>Abstract:</strong> Fusion and astrophysical plasmas are often modeled as charged fluids. To understand their dynamical behavior, the Euler partial-differential-equations for a charged fluid can be solved as an initial value problem or as an externally driven system. However, the fluid equations do not always capture the full richness of the plasma dynamics, for example, in scenarios where microphysics governs macroscopic behavior. Here, we present ADEPT, an Automatic Differentiation Enabled Plasma Transport code written in JAX that has been tested to reproduce known physics. ADEPT provides the user with the ability to train deep models for missing microphysics that improves the solvers ability to reproduce experimental data and/or first-principles simulations. Other applications include the ability to learn improved numerical methods, to perform parameter estimation and parameter discovery [1], and to perform sensitivity analyses. The GitHub repo includes the source code, installation and testing instructions, and an ab-initio simulation generated dataset on which we have trained a microphysics model [2].
        <br />
        [1] - A. S. Joglekar and A. G. R. Thomas - Unsupervised Discovery of Nonlinear Plasma Physics using Differentiable Kinetic Simulations - Journal of Plasma Physics - Dec 2022
        <br />
        [2] - A. S. Joglekar and A. G. R. Thomas - IoP Machine Learning Science & Technology - In Preparation
        <br /><strong>Motivation for combining the model with ML:</strong> Modeling plasma dynamics accurately is a notorious problem in modeling multiscale systems where missing physics can be accounted for by using analytically derived or phenenologically produced models. However, a plasma physics simulator that is capable of learning from experimental or ab-initio data can also account for the missing physics by using automatic differentiation to train models within the simulator. This is a timely application of machine learning to this simulator because of the ease with which a general numerical program can be expressed in modern deep learning frameworks. By using JAX, ADEPT is capable of exploiting GPUs as well as the rest of the ecosystem like Diffrax, Equinox, and jaxopt.
    },
    abbr={PM},
}
